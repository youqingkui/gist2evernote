// Generated by CoffeeScript 1.8.0
(function() {
  var Gists, ListGist, async, cheerio, inlineCss, j, makeNote, noteStore, request, rule, schedule;

  async = require('async');

  Gists = require('../models/gist');

  request = require('request');

  inlineCss = require('inline-css');

  cheerio = require('cheerio');

  makeNote = require('../service/makeNote');

  noteStore = require('../service/noteStroe');

  schedule = require("node-schedule");

  ListGist = (function() {
    function ListGist() {
      this.url = "https://api.github.com/users/youqingkui/gists";
      this.headers = {
        'User-Agent': 'youqingkui-gist2evernote'
      };
    }

    ListGist.prototype.getGist = function(cb) {
      var op, self;
      self = this;
      op = {
        url: self.url,
        headers: self.headers
      };
      return request.get(op, function(err, res, body) {
        if (err) {
          return cb(err);
        }
        return cb(null, body);
      });
    };

    ListGist.prototype.findGist = function(gistID, cb) {
      return Gists.findOne({
        gitst_id: gistID
      }, function(err, row) {
        if (err) {
          return cb(err);
        }
        if (!row) {
          return cb();
        }
        return cb(null, row);
      });
    };

    ListGist.prototype.getGistHtml = function(htmlUrl, cb) {
      var self;
      self = this;
      return async.waterfall([
        function(callback) {
          var op;
          op = self.genHeaders(htmlUrl);
          return request.get(op, function(err, res, body) {
            if (err) {
              return console.log(err);
            }
            return callback(null, body);
          });
        }, function(body, callback) {
          return inlineCss(body, {
            url: '/'
          }, function(err, html) {
            if (err) {
              return console.log(err);
            }
            return callback(null, html);
          });
        }, function(body, callback) {
          var $, $codeHtml, changeHtml;
          $ = cheerio.load(body);
          $codeHtml = $(".blob-wrapper");
          if ($codeHtml.length === 0) {
            return callback("没有发现代码块【%s】", body);
          }
          $ = cheerio.load($codeHtml.html());
          $(".js-line-number").remove();
          $("*").map(function(i, elem) {
            var k, v, _ref, _results;
            _ref = elem.attribs;
            _results = [];
            for (k in _ref) {
              v = _ref[k];
              if (k !== 'style') {
                _results.push($(this).removeAttr(k));
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          });
          changeHtml = $.html();
          return cb(null, changeHtml);
        }
      ]);
    };

    ListGist.prototype.genHeaders = function(url, headers) {
      var defHed, op;
      defHed = {
        'User-Agent': 'youqingkui-gist2evernote'
      };
      if (headers) {
        defHed = headers;
      }
      op = {
        url: url,
        headers: defHed
      };
      return op;
    };

    ListGist.prototype.pushEvernote = function(html, gistInfo, cb) {
      var guid, options, self, tag;
      self = this;
      guid = '9fad7bbe-9b7d-40f4-a7d9-78ae99a5730e';
      tag = self.getTag(gistInfo);
      options = {
        notebookGuid: guid,
        tagNames: tag,
        sourceURL: gistInfo.html_url
      };
      return makeNote(noteStore, gistInfo.description, html, options, function(err, note) {
        if (err) {
          return console.log(err);
        }
        return cb(null, note);
      });
    };

    ListGist.prototype.saveGist = function(gistInfo, cb) {
      var self;
      self = this;
      return async.waterfall([
        function(callback) {
          return self.findGist(gistInfo.id, function(err, row) {
            if (err) {
              return console.log(err);
            }
            if (row) {
              console.log("#############");
              console.log("gistInfo.id", gistInfo.id);
              console.log("find ", gistInfo.id);
              console.log("#############\n");
              return cb();
            } else {
              return callback();
            }
          });
        }, function(callback) {
          return self.getGistHtml(gistInfo.html_url, function(err, html) {
            if (err) {
              return console.log(err);
            }
            return callback(null, html);
          });
        }, function(html, callback) {
          return self.pushEvernote(html, gistInfo, function(err, note) {
            if (err) {
              return console.log(err);
            }
            return callback(null, note, html);
          });
        }, function(note, html, callback) {
          var gist, k, v, _ref;
          gist = Gists();
          gist.gitst_id = gistInfo.id;
          gist.html_url = gistInfo.html_url;
          gist.created_at = gistInfo.created_at;
          gist.updated_at = gistInfo.updated_at;
          gist.description = gistInfo.description;
          gist.guid = note.guid;
          gist.files = [];
          _ref = gistInfo.files;
          for (k in _ref) {
            v = _ref[k];
            gist.files.push(v);
          }
          gist.html_content = html;
          return gist.save(function(err, row) {
            if (err) {
              return console.log(err);
            }
            console.log("create ok", note.title);
            return cb();
          });
        }
      ]);
    };

    ListGist.prototype.getTag = function(gistInfo) {
      var k, tag, v, _ref;
      tag = [];
      _ref = gistInfo.files;
      for (k in _ref) {
        v = _ref[k];
        tag.push(v.language);
      }
      return tag;
    };

    return ListGist;

  })();

  rule = new schedule.RecurrenceRule();

  rule.dayOfWeek = [0, new schedule.Range(1, 6)];

  rule.hour = 18;

  rule.minute = 0;

  j = schedule.scheduleJob(rule, function() {
    var l;
    l = new ListGist();
    return async.waterfall([
      function(cb) {
        return l.getGist(function(err, data) {
          if (err) {
            return console.log(err);
          }
          data = JSON.parse(data);
          return cb(null, data);
        });
      }, function(data) {
        return async.eachSeries(data, function(item, callback) {
          return l.saveGist(item, callback);
        });
      }
    ]);
  });

}).call(this);

//# sourceMappingURL=list_gist.js.map
